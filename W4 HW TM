 /*1. According to the given diagram create STUDENTS , ACTIVITIES and SCHEDULE tables. (PK – PRIMARY
KEY,FK – FOREIGN KEY, * - NOT NULL )*/

/*1. According to the given diagram create STUDENTS , ACTIVITIES and SCHEDULE tables. (PK – PRIMARY
KEY,FK – FOREIGN KEY, * - NOT NULL )*/

CREATE TABLE Students (
        s_id INT PRIMARY KEY NOT NULL,
        first_name VARCHAR2(20) NOT NULL,
        last_name VARCHAR2(25),
        phone_number VARCHAR2(20),
        email VARCHAR2(30)
        );
DROP TABLE Activities;
CREATE TABLE Activities (
        a_id NUMBER PRIMARY KEY NOT NULL,
        a_name VARCHAR2(20) NOT NULL,
        costs NUMBER NOT NULL
        );
        
CREATE TABLE Schedule(
        s_id NUMBER,
        CONSTRAINT s_id_fk FOREIGN KEY (s_id)
        REFERENCES Students (s_id),
        a_id NUMBER,
        CONSTRAINT a_id_fk FOREIGN KEY (a_id)
        REFERENCES Activities (a_id),
        s_date DATE
        );
        
        
/*2. Insert data into students table from employees table.*/
INSERT INTO Students (s_id, first_name, last_name, phone_number, email) 
                            (SELECT employee_id, first_name, last_name, phone_number, email
                            FROM hr.employees);
        
/*3. Change phone number to ‘***’ for students with s_id > 200.*/
UPDATE Students
SET phone_number = '***'
WHERE s_id > 200;

/*4. Update first name and last names of students in Upper cases.*/
UPDATE Students
SET first_name =UPPER(TO_CHAR(first_name)),
    Last_name =UPPER(TO_CHAR(last_name));

/*5. Based on the students table populated with the following data, update the email to 'DSA' for all records
whose s_id is greater than 150.*/
UPDATE Students
SET email = 'DSA'
WHERE s_id >150;

/*6. Create PROGRAMMERS table using records from EMPLOYEES where job_id contains ‘PROG’ substring*/

CREATE TABLE programmers AS
    (SELECT *
    FROM hr.employees
    WHERE job_id = 'IT_PROG');
    DROP TABLE programmers;
    SELECT* FROM programmers;

/*7. Delete records from students table where s_id is between 150 and 160*/
DELETE FROM Students
WHERE s_id BETWEEN 150 AND 160;

/*8. a) Insert some date into SCHEDULE, then truncate and see results.
b) Drop schedule table*/
INSERT INTO Students (s_id, first_name, last_name, phone_number, email)
    	VALUES (1, 'Kamal', 'Aliyev', NULL, NULL)

INSERT INTO Activities (a_id, a_name, costs) 
	VALUES(1, 'Math', '600')

INSERT INTO schedule VALUES (1, 1, '25-NOV-22')
  

/*9. For any date given, write a script to find:
 a) The first and the last days of the next year;
b) The first and the last days of the next month;
c) The first and the last days of the previous month.*/

select trunc(last_day(sysdate)+1) as first_day_of_next_month,
       last_day(last_day(sysdate)+1) as last_day_of_next_month,
       trunc(add_months(sysdate,12),'yyyy') as first_day_of_next_year,
       trunc(add_months(sysdate,24),'yyyy')-1 as last_day_of_next_year,
       trunc(trunc(sysdate,'mm')-1,'mm') as first_day_of_previous_month,
       last_day(trunc(sysdate,'mm')-1) as last_day_of_previous_month
from dual;

/*10. Create a table named “Participants” which consists of first_name, last_name and salary (have to more
than 10000). */
DROP TABLE participants;
CREATE TABLE participants (
    first_name VARCHAR2(20),
    last_name VARCHAR2(20),
    salary NUMBER CHECK(salary>10000)
     );
